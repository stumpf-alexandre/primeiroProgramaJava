package cursoJava.executavel;

public class PrimeiraClasseJava {
	/*main é um metodo auto executavel em java*/
	public static void main(String[] args) {
		/*escreve texto no console*/
		/*teste de commit com o novo token*/
		System.out.println("Meu primeiro programa em Java");
		
		System.out.println("Java é orientado a objetos");
		
		System.out.println("Teste de token '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'");
		
		System.out.println("As 52 palavras reservadas do Java\r\n" + 
				"Conheça o significado de 52 palavras reservadas do Java.\r\n" + 
				"\r\n" +
				"\r\n" +
				"Modificadores de acesso\r\n" + 
				"private: acesso apenas dentro da classe\r\n" + 
				"\r\n" + 
				"protected: acesso por classes no mesmo pacote e subclasses\r\n" + 
				"\r\n" + 
				"public: acesso de qualquer classe\r\n" + 
				"\r\n" +
				"\r\n" +
				"Modificadores de classes, variáveis ou métodos\r\n" + 
				"abstract: classe que não pode ser instanciada ou método que precisa ser implementado por uma subclasse não abstrata\r\n" + 
				"\r\n" + 
				"class: especifica uma classe\r\n" + 
				"\r\n" + 
				"extends: indica a superclasse que a subclasse está estendendo\r\n" + 
				"\r\n" + 
				"final: impossibilita que uma classe seja estendida, que um método seja sobrescrito ou que uma variável seja reinicializada\r\n" + 
				"\r\n" + 
				"implements: indica as interfaces que uma classe irá implementar\r\n" + 
				"\r\n" + 
				"interface: especifica uma interface\r\n" + 
				"\r\n" + 
				"native: indica que um método está escrito em uma linguagem dependente de plataforma, como o C\r\n" + 
				"\r\n" + 
				"new: instancia um novo objeto, chamando seu construtor\r\n" + 
				"\r\n" + 
				"static: faz um método ou variável pertencer à classe ao invés de às instâncias\r\n" + 
				"\r\n" + 
				"strictfp: usado em frente a um método ou classe para indicar que os números de ponto flutuante seguirão as regras de ponto flutuante em todas as expressões\r\n" + 
				"\r\n" + 
				"synchronized:indica que um método só pode ser acessado por uma thread de cada vez\r\n" + 
				"\r\n" + 
				"transient: impede a serialização de campos\r\n" + 
				"\r\n" + 
				"volatile:indica que uma variável pode ser alterada durante o uso de threads\r\n" + 
				"\r\n" +
				"\r\n" +
				"Controle de fluxo dentro de um bloco de código\r\n" + 
				"break: sai do bloco de codigo em que ele está\r\n" + 
				"\r\n" + 
				"case: executa um bloco de código dependendo do teste do switch\r\n" + 
				"\r\n" + 
				"continue:pula a execução do código que viria após essa linha e vai para a próxima passagem do loop\r\n" + 
				"\r\n" + 
				"default:executa esse bloco de codigo caso nenhum dos teste de switch-case seja verdadeiro\r\n" + 
				"\r\n" + 
				"do:executa um bloco de código uma vez, e então realiza um teste em conjunto com o while para determinar se o bloco deverá ser executado novamente\r\n" + 
				"\r\n" + 
				"else: executa um bloco de código alternativo caso o teste if seja falso\r\n" + 
				"\r\n" + 
				"for:usado para realizar um loop condicional de um bloco de código\r\n" + 
				"\r\n" + 
				"if: usado para realizar um teste lógico de verdadeiro o falso\r\n" + 
				"\r\n" + 
				"instanceof: determina se um objeto é uma instância de determinada classe, superclasse ou interface\r\n" + 
				"\r\n" + 
				"return: retorna de um método sem executar qualquer código que venha depois desta linha (também pode retornar uma variável)\r\n" + 
				"\r\n" + 
				"switch:indica a variável a ser comparada nas expressões case\r\n" + 
				"\r\n" + 
				"while: executa um bloco de código repetidamente enquanto a condição for verdadeira\r\n" + 
				"\r\n" +
				"\r\n" +
				"Tratamento de erros\r\n" + 
				"assert: testa uma expressão condicional para verificar uma suposição do programador\r\n" + 
				"\r\n" + 
				"catch: declara o bloco de código usado para tratar uma exceção\r\n" + 
				"\r\n" + 
				"finally:bloco de código, após um try-catch, que é executado independentemente do fluxo de programa seguido ao lidar com uma exceção\r\n" + 
				"\r\n" + 
				"throw:usado para passar uma exceção para o método que o chamou\r\n" + 
				"\r\n" + 
				"throws: indica que um método pode passar uma exceção para o método que o chamou\r\n" + 
				"\r\n" + 
				"try: bloco de código que tentará ser executado, mas que pode causar uma exceção\r\n" + 
				"\r\n" +
				"\r\n" +
				"Controle de pacotes\r\n" + 
				"import:importa pacotes ou classes para dentro do código\r\n" + 
				"\r\n" + 
				"package: especifica a que pacote todas as classes de um arquivo pertencem\r\n" + 
				"\r\n" +
				"\r\n" +
				"Primitivos\r\n" + 
				"boolean:um valor indicando verdadeiro ou falso\r\n" + 
				"\r\n" + 
				"byte: um inteiro de 8 bits (signed)\r\n" + 
				"\r\n" + 
				"char: um caracter unicode (16-bit unsigned)\r\n" + 
				"\r\n" + 
				"double: um número de ponto flutuante de 64 bits (signed)\r\n" + 
				"\r\n" + 
				"float: um número de ponto flutuante de 32 bits (signed)\r\n" + 
				"\r\n" + 
				"int: um inteiro de 32 bits (signed)\r\n" + 
				"\r\n" + 
				"long: um inteiro de 64 bits (signed)\r\n" + 
				"\r\n" + 
				"short: um inteiro de 32 bits (signed)\r\n" + 
				"\r\n" +
				"\r\n" +
				"Variáveis de referência\r\n" + 
				"super: refere-se a superclasse imediata\r\n" + 
				"\r\n" + 
				"this: refere-se a instância atual do objeto\r\n" + 
				"\r\n" +
				"\r\n" +
				"Retorno de um método\r\n" + 
				"void: indica que o método não tem retorno\r\n" + 
				"\r\n" +
				"\r\n" +
				"Palavras reservadas não utilizadas\r\n" + 
				"const: Não utilize para declarar constantes; use public static final\r\n" + 
				"\r\n" + 
				"goto: não implementada na linguagem Java por ser considerada prejudicial\r\n" + 
				"\r\n" +
				"\r\n" +
				"Literais reservados\r\n" + 
				"De acordo com a Java Language Specification, null, true e false são tecnicamente chamados de valores literais, e não keywords. Se você tentar criar algum identificador com estes valores, você também terá um erro de compilação.\r\n");
	}
}
